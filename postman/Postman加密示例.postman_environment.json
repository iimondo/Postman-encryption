{
	"id": "45b92f01-119f-414b-bb2a-840d5fa300a3",
	"name": "Postman加密示例",
	"values": [
		{
			"key": "mobile",
			"value": "12345678911",
			"enabled": true
		},
		{
			"key": "HistoryTrace",
			"value": "{\"md5@1234\":\"81DC9BDB52D04DC20036DBD8313ED055\",\"md5@mobile\":\"1E5CE73F4FC4C3B764FB66811F093C87\",\"aes@mobile\":\"UKA7HIDLROSSLX9E3FOOQW==\",\"aes@1234\":\"F9BBQQGKTBUQ0RKXYMPBVQ==\"}",
			"enabled": true
		},
		{
			"key": "encryption.js",
			"value": "(function (env) {\r\n    // 内置工具类\r\n    class _Util {\r\n        constructor(env, log) {\r\n            this.isLog = log;\r\n            this.JSON = env.JSON;\r\n            this.request = env.request;\r\n            this.console = env.console;\r\n        }\r\n\r\n        // 日志\r\n        log(message) {\r\n            this.isLog && this.console.log(message);\r\n        }\r\n\r\n        // 在 '{{data}}' 符号中找到内容\r\n        findValidData(rawData) {\r\n            let validData = \"\";\r\n            let options = rawData.match(/\\{\\{(.+?)\\}\\}/g);\r\n            if (options && options.length > 0) {\r\n                let option = options[0];\r\n                if (option) {\r\n                    validData = option.substring(2, option.length - 2);\r\n                }\r\n            }\r\n\r\n            this.log(`raw data : ${rawData} , valid data : ${validData}`);\r\n            this.log('------------ findValidData ------------');\r\n            return validData.toString();\r\n        }\r\n\r\n        // FORM-DATA 参数转为对象返回\r\n        findFormDataParameter(parameters) {\r\n            return (typeof parameters === \"string\") ? this.JSON.parse(parameters) : parameters;\r\n        }\r\n\r\n        // URL 参数转为对象返回\r\n        findUrlParameter(url) {\r\n            let parameter = {};\r\n            if (url.indexOf(\"?\") !== -1) {\r\n                url.substr(url.indexOf(\"?\") + 1).split(\"&\").filter(index => index.length > 0)\r\n                    .forEach(index => {\r\n                        let result = index.split(\"=\");\r\n                        parameter[result[0]] = result[1];\r\n                        this.log(`name : ${result[0]} , value : ${result[1]}`);\r\n                    });\r\n            }\r\n\r\n            this.log('------------ URL上的参数 ------------');\r\n            return parameter;\r\n        }\r\n\r\n        // 所有请求参数以对象返回\r\n        findRequestParameter(data = this.request.data, url = this.request.url) {\r\n            return Object.assign(this.findUrlParameter(url), this.findFormDataParameter(data), this.request.headers);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加密抽象类\r\n     */\r\n    class AbsEncrypt {\r\n\r\n        constructor(name, splitter) {\r\n            this.name = name;\r\n            this.splitter = splitter;\r\n\r\n            // pm 参数\r\n            this.JSON = env.JSON;\r\n            this.CryptoJS = env.CryptoJS;\r\n            this.environment = env.pm.environment;\r\n        }\r\n\r\n        getEncryptedContent(raw) {\r\n            let content = raw.split(this.name + this.splitter)[1];\r\n            let encryptedContent = this.environment.get(content);\r\n            encryptedContent = encryptedContent ? encryptedContent : content;\r\n            return encryptedContent;\r\n        }\r\n\r\n        encrypt(raw) {\r\n            if (raw.indexOf(this.name + this.splitter) !== -1) {\r\n                let encryptValue = this.getEncryptedContent(raw);\r\n                this._save(raw, this.overrder(encryptValue, raw).toLocaleUpperCase());\r\n            }\r\n        }\r\n\r\n        _save(name, value) {\r\n            // 当前记录\r\n            this.environment.set(name, value);\r\n\r\n            // 所有动态生成的环境变量\r\n            let encryptionHistory = {};\r\n            if (this.environment.has(\"HistoryTrace\")) {\r\n                encryptionHistory = this.JSON.parse(this.environment.get(\"HistoryTrace\"));\r\n            }\r\n            encryptionHistory[name] = value;\r\n            this.environment.set(\"HistoryTrace\", this.JSON.stringify(encryptionHistory));\r\n        }\r\n\r\n        /**\r\n         * @param data  处理后\r\n         * @param raw   处理前\r\n         */\r\n        overrder(data, raw) {\r\n            // 子类重写此方法，实现具体加密\r\n            return '';\r\n        }\r\n\r\n        toString() {\r\n            return this.name;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * MD5 加密\r\n     */\r\n    class MD5 extends AbsEncrypt {\r\n\r\n        constructor(splitter) {\r\n            super('md5', splitter);\r\n        }\r\n\r\n        overrder(data) {\r\n            return this.CryptoJS.MD5(data).toString();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * AES加密\r\n     */\r\n    class AES extends AbsEncrypt {\r\n\r\n        /**\r\n         * @param {*} splitter // 加密分割符, 分割加密方式和加密内容\r\n         * @param {*} key      // AES 密钥\r\n         * @param {*} iv       // AES 偏移量\r\n         */\r\n        constructor(splitter, key, iv) {\r\n            super('aes', splitter);\r\n            this.iv = iv;\r\n            this.key = key;\r\n        }\r\n\r\n        overrder(data) {\r\n            if (!this.key) { throw new Error(\"没有在初始化配置中找到AES Key\"); }\r\n            if (!this.iv) { throw new Error(\"没有在初始化配置中找到AES iv\"); }\r\n\r\n            return this.CryptoJS.AES.encrypt(data, this.CryptoJS.enc.Utf8.parse(this.key), {\r\n                iv: this.CryptoJS.enc.Utf8.parse(this.iv),\r\n                mode: this.CryptoJS.mode.CBC,\r\n                padding: this.CryptoJS.pad.Pkcs7\r\n            }).toString();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * RSA加密\r\n     */\r\n    class RSA extends AbsEncrypt {\r\n        constructor(splitter, privateKey) {\r\n            super('rsa', splitter);\r\n        }\r\n    }\r\n\r\n\r\n    // 初始化\r\n    function register(configs = {\r\n        log: false,         // 日志开关\r\n        splitter: \"@\",      // 加密分割符，分割加密方式和加密内容\r\n        key: '',            // AES 密钥\r\n        iv: '',             // AES 偏移量\r\n        privateKey: ''      // RSA 私钥\r\n    }, encryptMethods = []) {\r\n        const util = new _Util(env, configs.log);\r\n        const requestParameters = util.findRequestParameter();\r\n\r\n        // 支持的加密方式\r\n        let supportMethods = encryptMethods.concat([\r\n            new MD5(configs.splitter),\r\n            new AES(configs.splitter, configs.key, configs.iv),\r\n            new RSA(configs.splitter, configs.privateKey)\r\n        ]);\r\n\r\n        // 遍历所有请求参数，执行加密\r\n        Object.keys(requestParameters).map(key => {\r\n            let value = requestParameters[key].toString();\r\n            if (value.indexOf(\"{{\") !== -1) {\r\n                let validData = util.findValidData(value);\r\n                supportMethods.forEach(method => method.encrypt(validData));\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    // 导出方法, 对象\r\n    env.register = register;\r\n    env.AbsEncrypt = AbsEncrypt;\r\n})(this);",
			"enabled": true
		},
		{
			"key": "md5@1234",
			"value": "81DC9BDB52D04DC20036DBD8313ED055",
			"enabled": true
		},
		{
			"key": "md5@mobile",
			"value": "1E5CE73F4FC4C3B764FB66811F093C87",
			"enabled": true
		},
		{
			"key": "aes@1234",
			"value": "F9BBQQGKTBUQ0RKXYMPBVQ==",
			"enabled": true
		},
		{
			"key": "aes@mobile",
			"value": "UKA7HIDLROSSLX9E3FOOQW==",
			"enabled": true
		}
	],
	"_postman_variable_scope": "environment",
	"_postman_exported_at": "2020-03-12T09:36:21.027Z",
	"_postman_exported_using": "Postman/7.19.1"
}